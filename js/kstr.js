// koffee 1.20.0

/*
000   000   0000000  000000000  00000000 
000  000   000          000     000   000
0000000    0000000      000     0000000  
000  000        000     000     000   000
000   000  0000000      000     000   000
 */
var ESCAPEREGEXP, STRIPANSI, str,
    indexOf = [].indexOf;

str = function(o) {
    var noon;
    if (o == null) {
        return 'null';
    }
    if (typeof o === 'object') {
        if (o._str != null) {
            return o._str();
        } else {
            noon = require('noon');
            return "\n" + noon.stringify(o, {
                circular: true
            });
        }
    } else {
        return String(o);
    }
};

str.encode = function(s, spaces) {
    var entity, r, xmlEntities;
    if (spaces == null) {
        spaces = true;
    }
    entity = require('html-entities');
    xmlEntities = new entity.XmlEntities();
    if (s) {
        r = xmlEntities.encode(s);
        if (spaces) {
            r = r.replace(/\s/g, '&nbsp;');
        }
        return r;
    } else {
        return '';
    }
};

ESCAPEREGEXP = /[-\\^$*+?.()|[\]{}\/]/g;

str.escapeRegexp = function(s) {
    return s.replace(ESCAPEREGEXP, '\\$&');
};

str.rstrip = function(s, cs) {
    var ref;
    if (cs == null) {
        cs = ' ';
    }
    if (s != null) {
        s;
    } else {
        s = '';
    }
    while (ref = s.slice(-1)[0], indexOf.call(cs, ref) >= 0) {
        s = s.slice(0, s.length - 1);
    }
    return s;
};

str.lstrip = function(s, cs) {
    var ref;
    if (cs == null) {
        cs = ' ';
    }
    if (s != null) {
        s;
    } else {
        s = '';
    }
    while (ref = s[0], indexOf.call(cs, ref) >= 0) {
        s = s.slice(1);
    }
    return s;
};

str.strip = function(s, cs) {
    if (cs == null) {
        cs = ' ';
    }
    return str.rstrip(str.lstrip(s, cs), cs);
};

str.trim = str.strip;

str.ltrim = str.lstrip;

str.rtrim = str.rstrip;

str.lcnt = function(s, c) {
    var i, ref;
    if (s != null) {
        s;
    } else {
        s = '';
    }
    if (typeof s === 'number' && Number.isFinite(s)) {
        s = String(s);
    }
    if (typeof s !== 'string') {
        return 0;
    }
    if (c != null) {
        c;
    } else {
        c = '';
    }
    i = -1;
    while (ref = s[++i], indexOf.call(c, ref) >= 0) {}
    return i;
};

str.lpad = function(s, l, c) {
    if (c == null) {
        c = ' ';
    }
    s = String(s);
    while (s.length < l) {
        s = c + s;
    }
    return s;
};

str.rpad = function(s, l, c) {
    if (c == null) {
        c = ' ';
    }
    s = String(s);
    while (s.length < l) {
        s += c;
    }
    return s;
};

str.pad = str.rpad;

str.detab = function(s) {
    var i;
    s = String(s);
    i = 0;
    while (i < s.length) {
        if (s[i] === '\t') {
            s = s.slice(0, i) + (str.lpad('', 4 - (i % 4))) + s.slice(i + 1);
        }
        i += 1;
    }
    return s;
};

str.time = function(t) {
    var f, j, k, len, len1, m, num, o, ref, ref1, thsnd;
    switch (typeof t) {
        case 'number':
            f = 1;
            o = {
                ms: 1000,
                second: 60,
                minute: 60,
                hour: 24,
                day: 30,
                month: 12,
                year: 0
            };
            ref = Object.keys(o);
            for (j = 0, len = ref.length; j < len; j++) {
                k = ref[j];
                num = parseInt(t / f);
                f *= o[k];
                if (k === 'year' || t < f) {
                    if (k !== 'ms' && num !== 1) {
                        k += 's';
                    }
                    return '' + num + ' ' + k;
                }
            }
            break;
        case 'bigint':
            thsnd = BigInt(1000);
            f = thsnd;
            ref1 = ['ns', 'Î¼s', 'ms', 'second'];
            for (m = 0, len1 = ref1.length; m < len1; m++) {
                k = ref1[m];
                if (k === 'seconds' || t < f) {
                    num = parseInt(thsnd * t / f);
                    if (k === 'second' && num !== 1) {
                        k += 's';
                    }
                    return '' + num + ' ' + k;
                }
                f *= thsnd;
            }
            break;
        default:
            return String(t);
    }
};

STRIPANSI = /\x1B[[(?);]{0,2}(;?\d)*./g;

str.stripAnsi = function(s) {
    return typeof s.replace === "function" ? s.replace(STRIPANSI, '') : void 0;
};

str.ansi2html = function(s) {
    var Ansi;
    Ansi = require('./ansi');
    return Ansi.html(s);
};

str.ansi = require('./ansi');

module.exports = str;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/kstr.coffee